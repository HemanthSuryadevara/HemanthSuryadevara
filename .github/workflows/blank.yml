`timescale 1 ns / 1 ns

module Toplevel_tb();

 
  parameter WIDTH = 4;

  // Define FORCE_ERROR to enable the force assignment
  // `define FORCE_ERROR

  reg clk, rst;
  reg [WIDTH-1:0]  data_in;
  reg [WIDTH-1:0] Coeff0, Coeff1, Coeff2, Coeff3;
  wire [2*WIDTH+1:0] data_out;

  // Instantiate the top-level module
  		//add2_out, data_in, Coeff0, Coeff1, Coeff2, Coeff3,  clk, rst
  TopLevel UUT (data_out, data_in, Coeff0, Coeff1, Coeff2, Coeff3, clk,rst);

   // Non-exhaustive test vectors
  initial begin
    $monitorb("%d data_out = %b data_in = %b Coeff1 = %b Coeff2 = %b Coeff1 = %b Coeff3 = %b", $time, data_out, data_in, Coeff0, Coeff1, Coeff2, Coeff3);
  end

  always #10 clk = ~clk;
 // Initialize signals
  initial begin
    $vcdpluson;
    Coeff0 = 4'b0000;
    Coeff1 = 4'b0000;
    Coeff2 = 4'b0000;
    Coeff3 = 4'b0000;
    data_in = 4'b0000;

    rst = 1;
    clk = 0;
    #40 rst = 0;
    Coeff0 = 4'b0001;
    Coeff1 = 4'b0010;
    Coeff2 = 4'b0100;
    Coeff3 = 4'b1000;

    data_in = 4'b1000;
    #120;

    Coeff0 = 4'b0100;
    Coeff1 = 4'b0101;
    Coeff2 = 4'b1010;
    Coeff3 = 4'b0110;
    data_in = 4'b1111;
    #120;

    Coeff0 = 4'b1111;
    Coeff1 = 4'b1111;
    Coeff2 = 4'b1111;
    Coeff3 = 4'b1111;
    data_in = 4'b1111;
    #80 $finish;
  end

  // Monitor
  always @(posedge clk) begin
    $display("Time=%0t: data_out=%d", $time, data_out);
  end

endmodule
